name: 'Telemetry summarize'
description: |
  Consumes job info, parses into spans, and pushes spans.
inputs:
  cert_concat:
    description: Concatenation of certs (CA;Client;ClientKey)

runs:
  using: 'composite'
  steps:
    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        cache: 'pip'
        cache-dependency-path: './shared-actions/telemetry-impls/summarize/requirements.txt'
    - name: Install dependencies
      run: pip install -r './shared-actions/telemetry-impls/summarize/requirements.txt'
      shell: bash
    # Writes JSON file that jobs below consume
    - uses: ./shared-actions/telemetry-impls/github-actions-job-info
      id: github-job-info
      with:
        all_jobs: true
    - name: Upload job JSON file if debugging
      uses: actions/upload-artifact@v4
      if: runner.debug == '1'
      with:
        name: telemetry-tools-all_jobs.json
        path: all_jobs.json
    - uses: ./shared-actions/telemetry-impls/sanity-checks
    # This downloads ALL of the files that we have collected from each job.
    - uses: actions/download-artifact@v4

    - name: Run parse and send trace/spans to endpoint
      shell: bash
      run: |
        timeout 5m python3 ./shared-actions/telemetry-impls/summarize/send_trace.py

    - name: Clean up telemetry files
      uses: actions/github-script@v7
      if: always() && runner.debug != ''
      with:
        retries: 3
        script: |
          get_artifacts = async ({github, context, process}) => {
            const opts = github.rest.actions.listWorkflowRunArtifacts.endpoint.merge(
                {
                    attempt_number: runAttempt,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: context.runId,
                    per_page: 100
                });
            const jobs = await github.paginate(opts);
            return jobs;
          };

          var artifacts = undefined;
          var retryCount = 0;
          maxRetries = 5;
          initialDelay = 2000;
          while (artifacts === undefined) {
            jobs = await get_job({github, context, process});
            if (artifacts === undefined && retryCount < maxRetries) {
              retryCount++;
              await new Promise(res => setTimeout(res, initialDelay * Math.pow(2, retryCount - 1)));
            } else {
              break;
            }
          }

          for (const artifact in artifacts.artifacts) {
            if (artifact.name.startsWith('telemetry-tools-')) {
              octokit.rest.actions.deleteArtifact({
                context.repo.owner,
                context.repo.repo,
                artifact.id,
              });
            }
          }
