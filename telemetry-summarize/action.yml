name: 'Telemetry summarize'
description: 'Consumes job info, parses into spans, and pushes spans. Requires otel-cli and jq on PATH.'
inputs:
  traceparent:
    description: 'The OpenTelemetry span id of the span that new spans should be created under'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        repository: rapidsai/shared-actions
        ref: add-telemetry
        path: ./shared-actions
    - uses: ./shared-actions/github-actions-job-info
      id: github-job-info
    - shell: bash
      run: |
        # This traceparent is the one that comes from outside; from any external job above this
        # Our job span should be a child of that trace. It is valid for this to be empty.
        export TRACEPARENT="${{inputs.traceparent}}"

        export OTEL_SERVICE_NAME="$(cat job_info.json | jq -r '.name' )"
        export job_traceparent="$(rapids-get-telemetry-traceparent "${OTEL_SERVICE_NAME}")"

        # Nest the steps under the job we just made a span for. This sets the parent span ID for us.
        export TRACEPARENT=${job_traceparent}

        # The reporting of the completion time is earlier than the actual last step's completion.
        # We compensate for that by picking up the last known completion time of any step.
        last_timestamp=$(date +'%s')

        # Base64 encoding is to avoid issues with spaces/newlines/whatever funny business
        for row in $(cat job_info.json | jq -r '.steps[] | @base64'); do
            name="$(echo ${row} | base64 --decode | jq -r ".name")"
            conclusion="$(echo ${row} | base64 --decode | jq -r ".conclusion")"

            step_traceparent="$(rapids-get-telemetry-traceparent "${OTEL_SERVICE_NAME}" "$name")";
            echo "OTEL_SERVICE_NAME: "${OTEL_SERVICE_NAME}", step_name: "$name"" >&2;
            echo "$step_traceparent" >&2;

            timestamp_as_date=$last_timestamp
            case $timestamp_as_date in
                ''|*[!0-9]*) echo "Date is not an integer" ;;
                *) timestamp_as_date="$(date -d @${last_timestamp} --rfc-3339=ns | sed "s/ /T/g" | sed "s/+00:00/Z/g")" ;;
            esac

            set -x
            otel-cli span create \
                --name="$name" \
                --force-trace-id="$(cut -d'-' -f2 <<<"$job_traceparent")" \
                --force-span-id="$(cut -d'-' -f3 <<<"$step_traceparent")" \
                --start="$(echo ${row} | base64 --decode | jq -r ".started_at // \"${timestamp_as_date}\"")" \
                --end="$(echo ${row} | base64 --decode | jq -r ".completed_at // \"${timestamp_as_date}\"")" \
                --verbose
            set +x

            # Compare timestamps; keep the latest one
            step_end_timestamp="$(echo ${row} | base64 --decode | jq -r ".completed_at")";
            if [ "$step_end_timestamp" != "null" ]; then
              step_end_timestamp=$(date -d "$step_end_timestamp" +'%s');
              if [ ${step_end_timestamp} -ge ${last_timestamp} ]; then
                last_timestamp=${step_end_timestamp};
                echo "Set timestamp to ${last_timestamp}";
              fi
            fi
        done

        echo "Final timestamp is ${last_timestamp}"
        case $last_timestamp in
            ''|*[!0-9]*) echo "Date is not an integer" ;;
            *) last_timestamp="$(date -d @${last_timestamp} --rfc-3339=ns | sed "s/ /T/g" | sed "s/+00:00/Z/g")" ;;
        esac

        if [ "$status_description" != "" ] && [ "$status_description" != "null" ]; then
          status_description="--status-description ${status_description}"
        else
          status_description=
        fi

        set -x
        # This is (unintuitively) set here because we don't know the true end time until we
        # go though the steps.
        otel-cli span create \
                    --name "workflow root" \
                    --force-trace-id "$(cut -d'-' -f2 <<<"$job_traceparent")" \
                    --force-span-id "$(cut -d'-' -f3 <<<"$job_traceparent")" \
                    --start "$(cat job_info.json | jq -r '.created_at // "now"')" \
                    --end "${last_timestamp}" \
                    --verbose \
                    $status_description

        otel-cli span create \
                    --name "Start delay time" \
                    --force-trace-id "$(cut -d'-' -f2 <<<"$job_traceparent")" \
                    --start "$(cat job_info.json | jq -r '.created_at // "now"')" \
                    --end "$(cat job_info.json  | jq -r '.started_at // "now"')" \
                    --verbose
        set +x
